<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on monique.dev</title><link>https://monique.dev/posts/</link><description>Recent content in Posts on monique.dev</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><lastBuildDate>Fri, 08 Jan 2021 17:24:33 -0300</lastBuildDate><atom:link href="https://monique.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Autocompletion globally installed OpenCV with PyCharm</title><link>https://monique.dev/posts/opencv-autocomplete-pycharm/</link><pubDate>Fri, 08 Jan 2021 17:24:33 -0300</pubDate><guid>https://monique.dev/posts/opencv-autocomplete-pycharm/</guid><description>Intro For a long time I was a user of the virtualenv module. But ever since I learned about the standard module venv I became a devotee.
For starters it comes bundled with python (or by installing the python3-venv package). It&amp;rsquo;s also more predictable than virtualenv since you don&amp;rsquo;t need to mess with your .{bash/zsh/fish}rc files and it&amp;rsquo;s generally installed under your project&amp;rsquo;s root dir.
But there&amp;rsquo;s one exception for using locally installed packages, and it&amp;rsquo;s packages that need to be built on your machine.</description></item><item><title>OBS Studio as a Virtual Webcam</title><link>https://monique.dev/posts/obs-vcam/</link><pubDate>Fri, 08 Jan 2021 17:23:30 -0300</pubDate><guid>https://monique.dev/posts/obs-vcam/</guid><description>In the year 2020 video conferencing exploded worldwide. It became a necessity for many (now) remote workers.
If you happen to be a lucky (debian-based) Linux user, this set of steps will show you how to use OBS Studio as a video source in any conferencing software (Google Meet, Zoom.us, Discord, etc.). Here we go:
Install OBS, libOBS, v4l loopback, qt-dev sudo apt-get install obs-studio libobs-dev v4l2loopback-dkms qtbase5-dev Configure the kernel module (v4l2loopback) sudo echo v4l2loopback &amp;gt; /etc/modules-load.</description></item><item><title>Haskell LSP (bonus: for Vim)</title><link>https://monique.dev/posts/haskell-lsp/</link><pubDate>Fri, 08 Jan 2021 17:22:20 -0300</pubDate><guid>https://monique.dev/posts/haskell-lsp/</guid><description>So you enjoy coding in Haskell. And you heard kids nowadays code using this LSP thingy.
Let&amp;rsquo;s cut to the chase: LSP is a spec that standardizes auto-completion, code navigation, linting, and all good stuff usually found in modern IDE&amp;rsquo;s. In order to use LSP with your favorite language you&amp;rsquo;ll need a language server to communicate with your editor of choice.
In this article we&amp;rsquo;ll focus on haskell&amp;rsquo;s language server. Not long ago the language server of choice used to be hie but now it&amp;rsquo;s deprecated.</description></item><item><title>Memory efficient parsing in GO</title><link>https://monique.dev/posts/go-parsing/</link><pubDate>Fri, 08 Jan 2021 12:01:00 -0300</pubDate><guid>https://monique.dev/posts/go-parsing/</guid><description>Instead of greedily reading the whole stream in memory and passing it to json.Unmarshal:
json.Unmarshal(bigBlobOfData, &amp;amp;myStruct) We can delegate the stream reading to our dear masters of golang:
json.NewDecoder(myIOReader).Decode(&amp;amp;myStruct) And read multi giga(tera?)bytes files with no sweat. Also works with xml.NewDecoder.</description></item><item><title>How to parse a key-value pair list with AWK</title><link>https://monique.dev/posts/awk/</link><pubDate>Fri, 08 Jan 2021 12:00:00 -0300</pubDate><guid>https://monique.dev/posts/awk/</guid><description>A simple example, using env as input:
$ env | grep EDITOR EDITOR=vim $ env | awk -F= &amp;#39;{a[$1]=$2} END {print(a[&amp;#34;EDITOR&amp;#34;])}&amp;#39; vim It&amp;rsquo;s way easier to just do echo $EDITOR though.
But sometimes it&amp;rsquo;s not so easy:
$ xdotool getactivewindow getwindowgeometry --shell | awk -F= &amp;#39;{a[$1]=$2} END {print(a[&amp;#34;WIDTH&amp;#34;])}&amp;#39; 1430 If you want to get the current window&amp;rsquo;s width.
_
= M =</description></item></channel></rss>