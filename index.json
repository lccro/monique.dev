[{"categories":null,"content":"OpenCV √© uma biblioteca gigante. Mas ao mesmo tempo bastante flex√≠vel. Voc√™ escolhe o que a sua vers√£o vai ter atrav√©s da instala√ß√£o ou n√£o no seu sistema de depend√™ncias opcionais. Neste artigo vou mostrar como eu fa√ßo para compilar o OpenCV com a maior linha de comando de cmake que j√° escrevi. Vou tamb√©m adicionar coment√°rios para que voc√™ entenda o que √© necess√°rio para compilar com sucesso. Vamos come√ßar. Download Voc√™ vai precisar de dois projetos para compilar o OpenCV: o c√≥digo fonte do OpenCV e o OpenCV contrib. Voc√™ pode tanto baixar as √∫ltimas vers√µes como .zip ou .tar.gz ou clonar os reposit√≥rios e fazer checkout das √∫ltimas vers√µes. Independente da forma que voc√™ escolheu baixar, extraia os projetos um ao lado do outro na mesma pasta: Depend√™ncias Se voc√™ instalar todas as depend√™ncias que eu apresentarei, voc√™ ter√°: -- OpenCV modules: -- To be built: aruco bgsegm bioinspired calib3d ccalib core cudaarithm cudabgsegm cudacodec cudafeatures2d cudafilters cudaimgproc cudalegacy cudaobjdetect cudaoptflow cudastereo cudawarping cudev cvv datasets dnn dnn_objdetect dnn_superres dpm face features2d flann freetype fuzzy gapi hfs highgui img_hash imgcodecs imgproc intensity_transform line_descriptor mcc ml objdetect optflow phase_unwrapping photo plot python3 quality rapid reg rgbd saliency shape stereo stitching structured_light superres surface_matching text tracking video videoio videostab xfeatures2d ximgproc xobjdetect xphoto -- Disabled: world -- Disabled by dependency: - -- Unavailable: alphamat cnn_3dobj hdf java julia matlab ovis python2 sfm ts viz Instale: python3 + numpy - Eu normalmente instalo o OpenCV globalmente, por fora de qualquer ambiente virtual (venv/virtualenv). Dessa forma √© poss√≠vel reutiliza-lo depois adicionando ele nos seus ambientes virtuais. Essa √© a sa√≠da esperada do cmake: python3-pyqt5.qtopengl - este pacote √© o suficiente para instalar o Qt5 + OpenGL. Por que o OpenGL √© t√£o importante? Pra ter um fps acelerado por hardware. Essa √© a sa√≠da esperada do cmake: ffmpeg + gstreamer - se precisa carregar videos em diferentes formatos (codecs): libfreetype-dev + libharfbuzz-dev - para usar fontes TrueType (.ttf) CUDA + CuDNN - esses dois t√™m uma explica√ß√£o a parte abaixo. ","date":"2021-02-16","objectID":"/posts/opencv/:0:0","tags":["opencv","python","cuda"],"title":"Como eu compilo o OpenCV no Linux com um monte de penduricalhos (CuDNN, CUDA, OpenGL, Qt, TrueType, CODECs de Video)","uri":"/posts/opencv/"},{"categories":null,"content":"CUDA + CuDNN CUDA (e CuDNN) s√£o normalmente instalados na mesma hierarquia de pastas. E a pasta ra√≠z √© tipicamente a /usr/local/cuda-\u003cversao\u003e. Mas n√£o √© uma obrigatoriedade. Eu uso o PopOS e ele instala na pasta /usr/lib/cuda-\u003cversao\u003e. Tamb√©m √© poss√≠vel ter v√°rias vers√µes instaladas ao mesmo tempo: Como visto acima, apesar da vers√£o CUDA-11.2 ter sido instalada automaticamente (essa √© a vers√£o atual hoje), o CuDNN s√≥ est√° dispon√≠vel at√© a vers√£o 11.1, ent√£o tive que instalar em paralelo a vers√£o CUDA-11.1 para ter ambos na mesma hierarquia de pastas. Pra fazer o cmake encontrar eles, basta ter a pasta \u003craiz do CUDA/bin no seu $PATH. Verifique se est√° tudo ok: Ufa! Moleza n√©?! ü§£ Bora compilar esse neg√≥cio! Verifica√ß√£o das depend√™ncias Pra poder compilar, voc√™ precisa criar uma sub-pasta build dentro da pasta do opencv (cd opencv; mkdir build; cd build). Agora respira fundo e aprecia a maior linha de comando que j√° escrevi pra chamar um programa: cmake -D CMAKE_CXX_COMPILER=/usr/bin/g++ \\ -D CUDA_HOST_COMPILER:FILEPATH=/usr/bin/gcc-9 \\ -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \\ -D WITH_CUDA=ON \\ -D WITH_CUDNN=ON \\ -D CUDNN_INCLUDE_DIR=/usr/lib/cuda-11.1/include \\ -D OPENCV_DNN_CUDA=ON \\ -D ENABLE_FAST_MATH=1 \\ -D CUDA_FAST_MATH=1 \\ -D CUDA_ARCH_BIN=8.6 \\ -D WITH_CUBLAS=1 \\ -D WITH_TBB=ON \\ -D WITH_OPENMP=ON \\ -D WITH_IPP=ON \\ -D CMAKE_BUILD_TYPE=RELEASE \\ -D WITH_CSTRIPES=ON \\ -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \\ -D CMAKE_INSTALL_PREFIX=/usr/local/ \\ -D WITH_QT=ON \\ -D WITH_OPENGL=ON \\ -D BUILD_EXAMPLES=OFF \\ -D BUILD_DOCS=OFF \\ -D BUILD_PERF_TESTS=OFF \\ -D BUILD_TESTS=OFF \\ -D BUILD_opencv_python3=ON \\ -D PYTHON3_EXECUTABLE=$(which python3) \\ -D PYTHON_INCLUDE_DIR=$(python2 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\ -D PYTHON3_INCLUDE_DIR=$(python3 -c \"from distutils.sysconfig import get_python_inc; print(get_python_inc())\") \\ -D PYTHON3_LIBRARY=$(python3 -c \"from distutils.sysconfig import get_config_var;from os.path import dirname,join ; print(join(dirname(get_config_var('LIBPC')),get_config_var('LDLIBRARY')))\") \\ -D PYTHON3_NUMPY_INCLUDE_DIRS=$(python3 -c \"import numpy; print(numpy.get_include())\") \\ -D PYTHON3_PACKAGES_PATH=$(python3 -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\") \\ .. Os dois .. no final s√£o importantes! Explicando algumas configura√ß√µes: CMAKE_CXX_COMPILER - para compilar arquivos c++ CUDA_HOST_COMPILER:FILEPATH - para compilar arquivos cuda - Durante a instala√ß√£o do pacote system76-cudnn reparei que ele instalva o gcc-9. Nada cient√≠fico, eu sei. CUDA_NVCC_FLAGS - precisei um dia, posso parar de usar eventualmente CUDNN_INCLUDE_DIR - verifique sua pasta raiz do CUDA ai CUDA_ARCH_BIN - a arquitetura da sua GPU. Verifique aqui: https://developer.nvidia.com/cuda-gpus OPENCV_EXTRA_MODULES_PATH - caminho relativo ou absoluto da pasta raiz do projeto opencv_contrib Pra validar se ele encontrou todas as depend√™ncias, compare a linha Unavailable: ... no inicio da sess√£o anterior e procure por diferen√ßas com a sua. Caso precise rodar o cmake novamente, saia da pasta build, apague ela, recrie, lembre de mudar pra ela e s√≥ ent√£o rode de novo o cmake. N√£o pule esta estapa! Compilar Essa √© a parte mais f√°cil de todas. Dado que todas as depend√™ncias foram encontradas, basa rodar o comando make: make -j\u003cnumber of processes\u003e Recomendo fortemente utilizar a flag -j para diminuir o tempo de compila√ß√£o. Caso queira continuar usando seu computador enquanto compila, recomendo usar um valor de $(nproc)-2. Para sua refer√™ncia, usar -j60 e um armazenamento nvme, levou mais um menos 5 minutos e meio aqui. Se algo der errado e o processo parar antes dos 100%, role pra cima (ou procure por error:) e verifique o que aconteceu. Instalar Se chegou at√© aqui: üíØ% baby! S√≥ precisa agora de: sudo make install Essa √© a √∫nica vez que precisamos evocar os super poderes do root, para poder copiar os arquivos para a pasta /usr/local. Validar Para testar sua conquista: $ python3 \u003e\u003e\u003e import cv2 \u003e\u003e\u003e print(cv2.getBuildInformation()) Compare essa sa√≠da com a do cmake. Verifique as dependencias e a data. Se nao baterem, desinstale o pip opencv-contrib-python. Usar Para usar o OpenCV em um venv (leia mais sobre venv‚Äôs aqui) use as flags: python -mvenv --system-site-packages venv Isso vai criar uma sub-pasta chamda venv com um ambiente virtual que inclui os pacotes globais do sistema, como o OpenCV. Conclus√£o Se voc√™ chegou at√© aqui, parab√©ns! Voc√™ √© uma pessoa muito determinada ü§£ Se precisar de alguma ajuda, deixe um coment√°rio abaixo. Boa sorte! _ = M = ","date":"2021-02-16","objectID":"/posts/opencv/:1:0","tags":["opencv","python","cuda"],"title":"Como eu compilo o OpenCV no Linux com um monte de penduricalhos (CuDNN, CUDA, OpenGL, Qt, TrueType, CODECs de Video)","uri":"/posts/opencv/"},{"categories":null,"content":"Acabo de descobrir um reposit√≥rio que salvou minha pele, ent√£o resolvi vir aqui compartilhar com voc√™s. Se voc√™ abrir o site do pytorch, ele te apresenta algumas op√ß√µes de instala√ß√£o: A quest√£o √© que, se voc√™ quiser instalar uma vers√£o diferente da apresentada (hoje √© a 1.7.1), vai come√ßar uma ca√ßa ao tesouro bem chatinha‚Ä¶ Existe uma p√°gina - que sei l√° o porqu√™ me levou um tempo pra achar - aqui: https://download.pytorch.org/whl/torch_stable.html Mas n√£o √© necess√°rio abrir esse link! Voc√™ pode pedir ao pip pra buscar pra voc√™: pip[3] install pytorch==1.6.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html E voil√°, seu pacote vai ser instalado automagicamente ;) Algumas dicas extras: Algumas vers√µes de cuda s√£o consideradas ‚Äúdefault‚Äù. Por exemplo, se voc√™ procurar por 1.6.0+cu102 n√£o vai ter l√°, porque pip install cuda==1.6.0 vai buscar automaticamente a vers√£o com cuda 10.2. Se for masoquista e quiser instalar uma vers√£o CPU-only: pip install 1.6.0+cpu Para salvar esse reposit√≥rio no seu requirements.txt, basta adicionar como primeira linha: -f https://download.pytorch.org/whl/torch_stable.html ... torch==1.6.0+cu110 ... Happy torching! ","date":"2021-01-20","objectID":"/posts/pre-compiled-pytorch/:0:0","tags":["python","pytorch","cuda","gpu"],"title":"Vers√µes pr√©-compiladas de Pytorch","uri":"/posts/pre-compiled-pytorch/"},{"categories":null,"content":"Intro Por um bom tempo utilizei o m√≥dulo virtualenv. Mas desde que aprendi sobre o m√≥dulo padr√£o de python venv nunca mais voltei. Pra come√ßar ele j√° vem instalado com o python (se n√£o veio, basta instalar o pacote python3-venv). Ele tamb√©m √© mais previs√≠vel do que o virtualenv, j√° que n√£o √© necess√°rio mexer nos seus arquivos de login .{bash/zsh/fish}rc e o uso padr√£o √© instal√°-lo na ra√≠z do seu projeto. Mas esse isolamento tem uma excess√£o, que s√£o os m√≥dulos que precisam ser compilados na sua m√°quina. O OpenCV √© um deles. Voc√™ pode usar o pacote pronto opencv-python-contrib mas n√£o vai tirar vantagem da sua GPU reluzente, por exemplo. ","date":"2020-12-28","objectID":"/posts/opencv-autocomplete-pycharm/:1:0","tags":["python","opencv","pycharm"],"title":"OpenCV instalado globalmente com autocomplete no PyCharm","uri":"/posts/opencv-autocomplete-pycharm/"},{"categories":null,"content":"OpenCV Compilar o OpenCV √© um assunto para um post futuro, mas assumindo que voc√™ fez todos os passos (cmake + flags infinitas / sudo make install) ele vai se instalar em /usr/lib. Para usar localmente em um ambiente venv isolado voc√™ deve criar o ambiente com essa flag: python -mvenv --system-site-packages venv A flag --system-site-packages cria um ambiente local mas inclui todos os m√≥dulos instalados globalmente. N√£o se eque√ßa de ativar seu ambiente: source venv/bin/activate ","date":"2020-12-28","objectID":"/posts/opencv-autocomplete-pycharm/:2:0","tags":["python","opencv","pycharm"],"title":"OpenCV instalado globalmente com autocomplete no PyCharm","uri":"/posts/opencv-autocomplete-pycharm/"},{"categories":null,"content":"PyCharm Agora, se voc√™ usa o PyCharm e adoraria ter autocomplete funcionando com o seu OpenCV, falta dar mais um passo. Primeiro, diga ao PyCharm para usar seu venv, indo em Settings -\u003e Python Interpreter -\u003e bot√£o de engrenagem -\u003e Add -\u003e Existing environment. (Se seu ambiente j√° existir antes de abrir o PyCharm, ele vai detectar sozinho) Mas o PyCharm n√£o vai encontrar o arquivo .so criado pelo OpenCV. Voc√™ precisa mostrar aonde ele est√°. Para encontrar aonde o seu est√° voc√™ pode usar a ferramenta find: find /usr -name cv2\\*so O meu estava em /usr/lib/python3/dist-packages/cv2/python-3.8/cv2.cpython-38-x86_64-linux-gnu.so, por exemplo. Agora volte nas configura√ß√µes do PyCharm (Settings -\u003e Python Interpreter -\u003e bot√£o de engrenagem -\u003e Show all), selecione o interpretador do seu projeto, clica no √∫ltimo bot√£o da barra de ferramentas (Show paths for the selected interpreter) e adiciona o diret√≥rio, removendo o nome do arquivo *.so: Depois deste √∫ltimo passo, o autocomplete vai funcionar perfeito! Happy coding! ","date":"2020-12-28","objectID":"/posts/opencv-autocomplete-pycharm/:3:0","tags":["python","opencv","pycharm"],"title":"OpenCV instalado globalmente com autocomplete no PyCharm","uri":"/posts/opencv-autocomplete-pycharm/"},{"categories":null,"content":"No ano de 2020 as video confer√™ncias explodiram pelo globo. Se tornaram uma necessidade para v√°rios trabalhadores remotos. Se voc√™ tiver a sorte de usar Linux (baseado em Debian), esse passo-a-passo vai te mostrar como usar o OBS Studio como uma fonte de v√≠deo em qualquer programa de confer√™ncia (Google Meet, Zoom, Discord, etc). Vamos l√°: ","date":"2020-12-22","objectID":"/posts/obs-vcam/:0:0","tags":["obs","virtual cam","linux"],"title":"OBS Studio como uma webcam virtual","uri":"/posts/obs-vcam/"},{"categories":null,"content":"Instalar OBS, libOBS, v4l loopback, qt-dev sudo apt-get install obs-studio libobs-dev v4l2loopback-dkms qtbase5-dev ","date":"2020-12-22","objectID":"/posts/obs-vcam/:1:0","tags":["obs","virtual cam","linux"],"title":"OBS Studio como uma webcam virtual","uri":"/posts/obs-vcam/"},{"categories":null,"content":"Configurar o m√≥dulo de kernel v4l2loopback sudo touch /etc/modules-load.d/v4l2loopback.conf sudo echo v4l2loopback \u003e /etc/modules-load.d/v4l2loopback.conf sudo echo 'options v4l2loopback card_label=\"OBS Video Source\" video_nr=10 exclusive_caps=1' \u003e /etc/modprobe.d/v4l2-obs-studio.conf sudo depmod -a sudo modprobe v4l2loopback Par√¢metros: video_nr n√∫mero do dispositivo que ser√° criado /dev/video10 card_label nome da c√¢mera virtual que vai aparecer no Meet/Zoom/Discord/etc exclusive_caps pra funcionar com o Google Chrome ü§∑ ","date":"2020-12-22","objectID":"/posts/obs-vcam/:2:0","tags":["obs","virtual cam","linux"],"title":"OBS Studio como uma webcam virtual","uri":"/posts/obs-vcam/"},{"categories":null,"content":"Instalar o plugin de OBS v4l2sink git clone --recursive https://github.com/obsproject/obs-studio.git # OBS git clone git@github.com:CatxFish/obs-v4l2sink.git # Plugin cd obs-v4l2sink mkdir build ; cd build cmake -DLIBOBS_INCLUDE_DIR=\"../../obs-studio/libobs\" -DCMAKE_INSTALL_PREFIX=/usr .. make -j sudo make install O plugin vai ser instalado em /usr/lib/obs-plugins, mas vamos colocar na nossa pasta home: mkdir -p ~/.config/obs-studio/plugins/v4l2sink/{data,bin/64bit} ln -sf /usr/lib/obs-plugins/v4l2sink.so ~/.config/obs-studio/plugins/v4l2sink/bin/64bit/ ln -sf /usr/share/obs-plugins/v4l2sink/locale ~/.config/obs-studio/plugins/v4l2sink/data/ Caso tenha funcionado, vai no menu Tools. Vai ter a op√ß√£o V4L2 Video Output. Defina o dispositivo (device) como /dev/video10, o formato para YUY2, clique em Auto-Start e em Start. A√≠ √© s√≥ criar uma cena no seu OBS e abrir sua c√¢mera em outro programa! Boas confer√™ncias ;) _ = M = ","date":"2020-12-22","objectID":"/posts/obs-vcam/:3:0","tags":["obs","virtual cam","linux"],"title":"OBS Studio como uma webcam virtual","uri":"/posts/obs-vcam/"},{"categories":null,"content":"Ent√£o voc√™ curte codar em Haskell. E voc√™ ouviu dizer que os jovens hoje em dia usam esse neg√≥cio chamado LSP. Direto ao ponto: LSP √© uma especifica√ß√£o que padroniza o auto-complete, navega√ß√£o no c√≥digo, linting, essas facilidades normalmente encontradas somente em IDE‚Äôs. E pra usar o tal do LSP √© preciso ter um servidor de linguagem que se comunica com o seu editor preferido. Neste artigo vamos focar no LSP de Haskell (haskell‚Äôs language server). H√° um tempo atr√°s o LSP padr√£o de Haskell era o HIE, mas foi descontinuado. Vamos come√ßar ent√£o! Assumindo que voc√™ tem o Haskell Stack instalado: stack install ghcid hspec-discover # opcional mas recomendado git clone https://github.com/haskell/haskell-language-server --recurse-submodules cd haskell-language-server stack ./install.hs help stack ./install.hs hls Os bin√°rios s√£o instalados em ~/.local/bin Certo, mas como us√°-lo agora? Bem, depende do seu editor. Vou mostrar como fa√ßo no meu .vimrc: Plug 'prabirshrestha/vim-lsp'Plug 'prabirshrestha/asyncomplete.vim'Plug 'prabirshrestha/asyncomplete-lsp.vim'Plug 'mattn/vim-lsp-settings'Leia a documenta√ß√£o destes plugins para tirar melhor proveito deles! \" o plugin vim-lsp-settings n√£o detecta o hls automaticamente. Vamos ensinar pra ele:if (executable('haskell-language-server-wrapper')) au User lsp_setup call lsp#register_server({ \\ 'name': 'haskell-language-server-wrapper', \\ 'cmd': {server_info-\u003e['haskell-language-server-wrapper', '--lsp']}, \\ 'whitelist': ['haskell'], \\ })endif\" Meus atalhosfunction! s:on_lsp_buffer_enabled() abort setlocal omnifunc=lsp#complete setlocal signcolumn=yes if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif nmap \u003cbuffer\u003e gd \u003cplug\u003e(lsp-definition) nmap \u003cbuffer\u003e gr \u003cplug\u003e(lsp-references) nmap \u003cbuffer\u003e gf \u003cplug\u003e(lsp-code-action) nmap \u003cbuffer\u003e gi \u003cplug\u003e(lsp-implementation) nmap \u003cbuffer\u003e gt \u003cplug\u003e(lsp-type-definition) nmap \u003cbuffer\u003e \u003cF2\u003e \u003cplug\u003e(lsp-rename) nmap \u003cbuffer\u003e [g \u003cPlug\u003e(lsp-previous-diagnostic) nmap \u003cbuffer\u003e ]g \u003cPlug\u003e(lsp-next-diagnostic) nmap \u003cbuffer\u003e K \u003cplug\u003e(lsp-hover) xmap \u003cbuffer\u003e f \u003cplug\u003e(lsp-document-range-format) nmap \u003cbuffer\u003e \u003cF5\u003e \u003cplug\u003e(lsp-code-lens)\" reformatar sempre ao gravar (as vezes irritante)\" autocmd BufWritePre \u003cbuffer\u003e LspDocumentFormatSyncendfunction\" Decora√ß√µesaugroup lsp_install au! let g:lsp_signs_enabled = 1 \" liga signs let g:lsp_diagnostics_echo_cursor = 1 \" liga ecoar sob o cursor no modo normal let g:lsp_signs_error = {'text': '‚úó'}\" let g:lsp_signs_warning = {'text': '‚Äº', 'icon': '/path/to/some/icon'} \" √≠cones s√≥ na vers√£o gr√°fica\" let g:lsp_signs_hint = {'icon': '/path/to/some/other/icon'} \" √≠cones s√≥ na vers√£o gr√°fica let g:lsp_signs_warning = {'text': '‚Äº'} let g:lsp_highlight_references_enabled = 1 highlight link LspErrorText GruvboxRedSign \" requires gruvbox highlight clear LspWarningLine\" highlight lspReference ctermfg=red guifg=red ctermbg=green guibg=green highlight lspReference guibg=#303010\" chama s:on_lsp_buffer_enabled somente para linguagens cadastradas no LSP autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()augroup ENDA primeira vez que iniciar o vim com um arquivo Haskell vai levar um tempinho pra carregar (verifique o status com :LspStatus). Assim que a margem esquerda do editor ficar com um espa√ßo de 1 letra quer dizer que funcionou! Agora seu Vim fala LSP: Hover: Auto-complete: etc. etc. etc. _ = M = ","date":"2020-10-26","objectID":"/posts/haskell-lsp/:0:0","tags":["haskell","vim","lsp"],"title":"LSP de Haskell (bonus: com Vim)","uri":"/posts/haskell-lsp/"},{"categories":null,"content":"Ao inv√©s de ler todo o fluxo gulosamente em mem√≥ria e pass√°-lo para json.Unmarshal: json.Unmarshal(umMonteDeBytes, \u0026minhaStruct) N√≥s podemos delegar a leitura do fluxo para os nossos queridos mestres da golang: json.NewDecoder(meuIOReader).Decode(\u0026minhaStruct) E ler arquivos de multi-giga(tera?)bytes sem suor. Tamb√©m funciona com xml.NewDecoder. _ = M = ","date":"2020-10-21","objectID":"/posts/go-parsing/:0:0","tags":["go","golang","json","xml","stream"],"title":"Parsing em GO com uso eficiente da mem√≥ria","uri":"/posts/go-parsing/"},{"categories":null,"content":"Um exemplo simples, usando env como entrada: env | grep EDITOR EDITOR=vim env | awk -F= '{a[$1]=$2} END {print(a[\"EDITOR\"])}' vim Entretanto, √© muito mais f√°cil fazer echo $EDITOR. Mas as vezes n√£o √© t√£o f√°cil: xdotool getactivewindow getwindowgeometry --shell | awk -F= '{a[$1]=$2} END {print(a[\"WIDTH\"])}' 1430 Caso queira pegar a largura da janela ativa. _ = M = ","date":"2020-09-07","objectID":"/posts/awk/:0:0","tags":["awk","parse","shell","oneliner"],"title":"Como interpretar uma lista de pares chave-valor com AWK","uri":"/posts/awk/"},{"categories":null,"content":"Sobre","date":"0001-01-01","objectID":"/about/","tags":null,"title":"Sobre","uri":"/about/"},{"categories":null,"content":"Links https://twitter.com/moniquelive https://github.com/moniquelive https://instagram.com/moniquelive.dev https://stackoverflow.com/users/9793/cyber-oliveira ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"Sobre","uri":"/about/"}]