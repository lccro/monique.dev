<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vim on monique.dev</title><link>https://monique.dev/tags/vim/</link><description>Recent content in vim on monique.dev</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><copyright>Â©2021 MoniqueLive.</copyright><lastBuildDate>Mon, 26 Oct 2020 12:00:00 -0300</lastBuildDate><atom:link href="https://monique.dev/tags/vim/index.xml" rel="self" type="application/rss+xml"/><item><title>Pre-compiled pytorch versions</title><link>https://monique.dev/posts/pre-compiled-pytorch/</link><pubDate>Wed, 20 Jan 2021 15:00:00 -0300</pubDate><guid>https://monique.dev/posts/pre-compiled-pytorch/</guid><description>&lt;p>Acabo de descobrir um repositÃ³rio que salvou minha pele, entÃ£o resolvi vir aqui compartilhar com vocÃªs.&lt;/p>
&lt;p>Se vocÃª abrir o site do &lt;code>pytorch&lt;/code>, ele te apresenta algumas opÃ§Ãµes de instalaÃ§Ã£o:&lt;/p>
&lt;p>&lt;img src="https://dev-to-uploads.s3.amazonaws.com/i/oixb0x4hndw3ddm10gub.png"
alt="Alt Text"/>&lt;/p>
&lt;p>A questÃ£o Ã© que, se vocÃª quiser instalar uma versÃ£o diferente da apresentada (hoje Ã© a 1.7.1), vai comeÃ§ar uma caÃ§a ao tesouro bem chatinha&amp;hellip;&lt;/p>
&lt;p>Existe uma pÃ¡gina - que sei lÃ¡ o porquÃª me levou um tempo pra achar - aqui:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">https://download.pytorch.org/whl/torch_stable.html
&lt;/code>&lt;/pre>&lt;p>Mas nÃ£o Ã© necessÃ¡rio abrir esse link! VocÃª pode pedir ao &lt;code>pip&lt;/code> pra buscar pra vocÃª:&lt;/p>
&lt;pre>&lt;code class="language-console" data-lang="console">pip[3] install pytorch==1.6.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html
&lt;/code>&lt;/pre>&lt;p>E voilÃ¡, seu pacote vai ser instalado automagicamente ;)&lt;/p>
&lt;p>Algumas dicas extras:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Algumas versÃµes de &lt;code>cuda&lt;/code> sÃ£o consideradas &amp;ldquo;default&amp;rdquo;. Por exemplo, se vocÃª procurar por &lt;code>1.6.0+cu102&lt;/code> nÃ£o vai ter lÃ¡, porque &lt;code>pip install cuda==1.6.0&lt;/code> vai buscar automaticamente a versÃ£o com cuda &lt;code>10.2&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Se for masoquista e quiser instalar uma versÃ£o CPU-only: &lt;code>pip install 1.6.0+cpu&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Para salvar esse repositÃ³rio no seu &lt;code>requirements.txt&lt;/code>, basta adicionar como primeira linha:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-console" data-lang="console">-f https://download.pytorch.org/whl/torch_stable.html
...
torch==1.6.0+cu110
...
&lt;/code>&lt;/pre>&lt;p>Happy torching!&lt;/p></description></item><item><title/><link>https://monique.dev/archives/</link><pubDate>Sun, 10 Jan 2021 00:00:00 +0000</pubDate><guid>https://monique.dev/archives/</guid><description/></item><item><title>OpenCV instalado globalmente com autocomplete no PyCharm</title><link>https://monique.dev/posts/opencv-autocomplete-pycharm/</link><pubDate>Mon, 28 Dec 2020 12:00:00 -0300</pubDate><guid>https://monique.dev/posts/opencv-autocomplete-pycharm/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Por um bom tempo utilizei o mÃ³dulo &lt;a href="https://virtualenv.pypa.io/en/latest/"title="Virtual Env"target="_blank">virtualenv&lt;/a>. Mas desde que aprendi sobre o mÃ³dulo padrÃ£o de python &lt;a href="https://docs.python.org/3/tutorial/venv.html"title="venv"target="_blank">venv&lt;/a> nunca mais voltei.&lt;/p>
&lt;p>Pra comeÃ§ar ele jÃ¡ vem instalado com o python (se nÃ£o veio, basta instalar o pacote &lt;code>python3-venv&lt;/code>). Ele tambÃ©m Ã© mais previsÃ­vel do que o &lt;code>virtualenv&lt;/code>, jÃ¡ que nÃ£o Ã© necessÃ¡rio mexer nos seus arquivos de login &lt;code>.{bash/zsh/fish}rc&lt;/code> e o uso padrÃ£o Ã© instalÃ¡-lo na raÃ­z do seu projeto.&lt;/p>
&lt;p>Mas esse isolamento tem uma excessÃ£o, que sÃ£o os mÃ³dulos que precisam ser compilados na sua mÃ¡quina. O &lt;code>OpenCV&lt;/code> Ã© um deles. VocÃª pode usar o pacote pronto &lt;code>opencv-python-contrib&lt;/code> mas nÃ£o vai tirar vantagem da sua GPU reluzente, por exemplo.&lt;/p>
&lt;h2 id="opencv">OpenCV&lt;/h2>
&lt;p>Compilar o &lt;code>OpenCV&lt;/code> Ã© um assunto para um post futuro, mas assumindo que vocÃª fez todos os passos (&lt;code>cmake + flags infinitas / sudo make install&lt;/code>) ele vai se instalar em &lt;code>/usr/lib&lt;/code>.&lt;/p>
&lt;p>Para usar localmente em um ambiente &lt;code>venv&lt;/code> isolado vocÃª deve criar o ambiente com essa flag:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">python -mvenv --system-site-packages venv
&lt;/code>&lt;/pre>&lt;/div>&lt;p>A flag &lt;code>--system-site-packages&lt;/code> cria um ambiente local mas inclui todos os mÃ³dulos instalados globalmente.&lt;/p>
&lt;p>NÃ£o se equeÃ§a de ativar seu ambiente:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">source venv/bin/activate
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pycharm">PyCharm&lt;/h2>
&lt;p>Agora, se vocÃª usa o PyCharm e adoraria ter autocomplete funcionando com o seu OpenCV, falta dar mais um passo.&lt;/p>
&lt;p>Primeiro, diga ao PyCharm para usar seu &lt;code>venv&lt;/code>, indo em &lt;code>Settings -&amp;gt; Python Interpreter -&amp;gt; botÃ£o de engrenagem -&amp;gt; Add -&amp;gt; Existing environment&lt;/code>.&lt;/p>
&lt;p>&lt;em>(Se seu ambiente jÃ¡ existir antes de abrir o PyCharm, ele vai detectar sozinho)&lt;/em>&lt;/p>
&lt;p>Mas o PyCharm nÃ£o vai encontrar o arquivo &lt;code>.so&lt;/code> criado pelo OpenCV. VocÃª precisa mostrar aonde ele estÃ¡.&lt;/p>
&lt;p>Para encontrar aonde o seu estÃ¡ vocÃª pode usar a ferramenta &lt;code>find&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">find /usr -name cv2&lt;span style="color:#ae81ff">\*&lt;/span>so
&lt;/code>&lt;/pre>&lt;/div>&lt;p>O meu estava em &lt;code>/usr/lib/python3/dist-packages/cv2/python-3.8/cv2.cpython-38-x86_64-linux-gnu.so&lt;/code>, por exemplo.&lt;/p>
&lt;p>Agora volte nas configuraÃ§Ãµes do PyCharm (&lt;code>Settings -&amp;gt; Python Interpreter -&amp;gt; botÃ£o de engrenagem -&amp;gt; Show all&lt;/code>), selecione o interpretador do seu projeto, clica no Ãºltimo botÃ£o da barra de ferramentas (&lt;code>Show paths for the selected interpreter&lt;/code>) e adiciona o diretÃ³rio, removendo o nome do arquivo &lt;code>*.so&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://dev-to-uploads.s3.amazonaws.com/i/rkajktmxuejw9ur1hx0e.png"
alt="Show paths for the selected interpreter"/>&lt;/p>
&lt;p>Depois deste Ãºltimo passo, o autocomplete vai funcionar perfeito!&lt;/p>
&lt;p>Happy coding!&lt;/p></description></item><item><title>OBS Studio como uma webcam virtual</title><link>https://monique.dev/posts/obs-vcam/</link><pubDate>Tue, 22 Dec 2020 12:00:00 -0300</pubDate><guid>https://monique.dev/posts/obs-vcam/</guid><description>&lt;p>No ano de 2020 as video conferÃªncias explodiram pelo globo. Se tornaram uma necessidade para vÃ¡rios trabalhadores remotos.&lt;/p>
&lt;p>Se vocÃª tiver a sorte de usar Linux (baseado em Debian), esse passo-a-passo vai te mostrar como usar o OBS Studio como uma fonte de vÃ­deo em qualquer programa de conferÃªncia (Google Meet, Zoom, Discord, etc). Vamos lÃ¡:&lt;/p>
&lt;h2 id="instalar-obs-libobs-v4l-loopback-qt-dev">Instalar OBS, libOBS, v4l loopback, qt-dev&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo apt-get install obs-studio libobs-dev v4l2loopback-dkms qtbase5-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configurar-o-mÃ³dulo-de-kernel-v4l2loopback">Configurar o mÃ³dulo de kernel &lt;code>v4l2loopback&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">sudo echo v4l2loopback &amp;gt; /etc/modules-load.d/v4l2loopback.conf
sudo echo &lt;span style="color:#e6db74">&amp;#39;options v4l2loopback card_label=&amp;#34;OBS Video Source&amp;#34; video_nr=10 exclusive_caps=1&amp;#39;&lt;/span> &amp;gt; /etc/modprobe.d/v4l2-obs-studio.conf
sudo depmod -a
sudo modprobe v4l2loopback
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ParÃ¢metros:&lt;/p>
&lt;ul>
&lt;li>&lt;code>video_nr&lt;/code> nÃºmero do dispositivo que serÃ¡ criado &lt;code>/dev/video10&lt;/code>&lt;/li>
&lt;li>&lt;code>card_label&lt;/code> nome da cÃ¢mera virtual que vai aparecer no Meet/Zoom/Discord/etc&lt;/li>
&lt;li>&lt;code>exclusive_caps&lt;/code> pra funcionar com o Google Chrome ðŸ¤·&lt;/li>
&lt;/ul>
&lt;h2 id="instalar-o-plugin-de-obs-v4l2sink">Instalar o plugin de OBS &lt;code>v4l2sink&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">git clone --recursive https://github.com/obsproject/obs-studio.git &lt;span style="color:#75715e"># OBS&lt;/span>
git clone git@github.com:CatxFish/obs-v4l2sink.git &lt;span style="color:#75715e"># Plugin&lt;/span>
cd obs-v4l2sink
mkdir build ; cd build
cmake -DLIBOBS_INCLUDE_DIR&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;../../obs-studio/libobs&amp;#34;&lt;/span> -DCMAKE_INSTALL_PREFIX&lt;span style="color:#f92672">=&lt;/span>/usr ..
make -j
sudo make install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>O plugin vai ser instalado em &lt;code>/usr/lib/obs-plugins&lt;/code>, mas vamos colocar na nossa pasta home:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">mkdir -p ~/.config/obs-studio/plugins/v4l2sink/&lt;span style="color:#f92672">{&lt;/span>data,bin/64bit&lt;span style="color:#f92672">}&lt;/span>
ln -sf /usr/lib/obs-plugins/v4l2sink.so ~/.config/obs-studio/plugins/v4l2sink/bin/64bit/
ln -sf /usr/share/obs-plugins/v4l2sink/locale ~/.config/obs-studio/plugins/v4l2sink/data/
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Caso tenha funcionado, vai no menu &lt;code>Tools&lt;/code>. Vai ter a opÃ§Ã£o &lt;code>V4L2 Video Output&lt;/code>. Defina o dispositivo (device) como &lt;code>/dev/video10&lt;/code>, o formato para &lt;code>YUY2&lt;/code>, clique em &lt;code>Auto-Start&lt;/code> e em &lt;code>Start&lt;/code>. AÃ­ Ã© sÃ³ criar uma cena no seu OBS e abrir sua cÃ¢mera em outro programa!&lt;/p>
&lt;p>Boas conferÃªncias ;)&lt;/p>
&lt;p>_&lt;/p>
&lt;p>= M =&lt;/p></description></item><item><title>LSP de Haskell (bonus: com Vim)</title><link>https://monique.dev/posts/haskell-lsp/</link><pubDate>Mon, 26 Oct 2020 12:00:00 -0300</pubDate><guid>https://monique.dev/posts/haskell-lsp/</guid><description>&lt;p>EntÃ£o vocÃª curte codar em Haskell. E vocÃª ouviu dizer que os jovens hoje em dia usam esse negÃ³cio chamado &lt;a href="https://microsoft.github.io/language-server-protocol/"title="Language Server Protocol"target="_blank">LSP&lt;/a>.&lt;/p>
&lt;p>Direto ao ponto: &lt;code>LSP&lt;/code> Ã© uma especificaÃ§Ã£o que padroniza o auto-complete, navegaÃ§Ã£o no cÃ³digo, linting, essas facilidades normalmente encontradas somente em IDE&amp;rsquo;s. E pra usar o tal do &lt;code>LSP&lt;/code> Ã© preciso ter um &lt;em>servidor de linguagem&lt;/em> que se comunica com o seu editor preferido.&lt;/p>
&lt;p>Neste artigo vamos focar no &lt;code>LSP&lt;/code> de Haskell (&lt;a href="https://github.com/haskell/haskell-language-server"title="Haskell Language Server"target="_blank">haskell&amp;rsquo;s language server&lt;/a>). HÃ¡ um tempo atrÃ¡s o &lt;code>LSP&lt;/code> padrÃ£o de Haskell era o &lt;code>HIE&lt;/code>, mas foi descontinuado.&lt;/p>
&lt;p>Vamos comeÃ§ar entÃ£o! Assumindo que vocÃª tem o &lt;a href="https://docs.haskellstack.org/en/stable/README/"title="Haskell Stack"target="_blank">Haskell Stack&lt;/a> instalado:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ stack install ghcid hspec-discover &lt;span style="color:#75715e"># opcional mas recomendado&lt;/span>
$ git clone https://github.com/haskell/haskell-language-server --recurse-submodules
$ cd haskell-language-server
$ stack ./install.hs help
$ stack ./install.hs hls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Os binÃ¡rios sÃ£o instalados em &lt;code>~/.local/bin&lt;/code>&lt;/p>
&lt;p>Certo, mas como usÃ¡-lo agora? Bem, depende do seu editor. Vou mostrar como faÃ§o no meu &lt;code>.vimrc&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-VimL" data-lang="VimL">&lt;span style="color:#a6e22e">Plug&lt;/span> &lt;span style="color:#e6db74">&amp;#39;prabirshrestha/vim-lsp&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">Plug&lt;/span> &lt;span style="color:#e6db74">&amp;#39;prabirshrestha/asyncomplete.vim&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">Plug&lt;/span> &lt;span style="color:#e6db74">&amp;#39;prabirshrestha/asyncomplete-lsp.vim&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">Plug&lt;/span> &lt;span style="color:#e6db74">&amp;#39;mattn/vim-lsp-settings&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Leia a documentaÃ§Ã£o destes plugins para tirar melhor proveito deles!&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-VimL" data-lang="VimL">&lt;span style="color:#75715e">&amp;#34; o plugin vim-lsp-settings nÃ£o detecta o hls automaticamente. Vamos ensinar pra ele:&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">executable&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;haskell-language-server-wrapper&amp;#39;&lt;/span>))&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">au&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#a6e22e">lsp_setup&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#a6e22e">lsp&lt;/span>#&lt;span style="color:#a6e22e">register_server&lt;/span>({&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> \ &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;haskell-language-server-wrapper&amp;#39;&lt;/span>,&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> \ &lt;span style="color:#e6db74">&amp;#39;cmd&amp;#39;&lt;/span>: {&lt;span style="color:#a6e22e">server_info&lt;/span>-&amp;gt;[&lt;span style="color:#e6db74">&amp;#39;haskell-language-server-wrapper&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;--lsp&amp;#39;&lt;/span>]},&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> \ &lt;span style="color:#e6db74">&amp;#39;whitelist&amp;#39;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#39;haskell&amp;#39;&lt;/span>],&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> \ })&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">endif&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&amp;#34; Meus atalhos&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span>! &lt;span style="color:#a6e22e">s&lt;/span>:&lt;span style="color:#a6e22e">on_lsp_buffer_enabled&lt;/span>() &lt;span style="color:#a6e22e">abort&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">setlocal&lt;/span> &lt;span style="color:#a6e22e">omnifunc&lt;/span>=&lt;span style="color:#a6e22e">lsp&lt;/span>#&lt;span style="color:#a6e22e">complete&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">setlocal&lt;/span> &lt;span style="color:#a6e22e">signcolumn&lt;/span>=&lt;span style="color:#a6e22e">yes&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">exists&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;+tagfunc&amp;#39;&lt;/span>) | &lt;span style="color:#a6e22e">setlocal&lt;/span> &lt;span style="color:#a6e22e">tagfunc&lt;/span>=&lt;span style="color:#a6e22e">lsp&lt;/span>#&lt;span style="color:#a6e22e">tagfunc&lt;/span> | &lt;span style="color:#66d9ef">endif&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">gd&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">definition&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">gr&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">references&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">gf&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">code&lt;/span>-&lt;span style="color:#a6e22e">action&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">gi&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">implementation&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">gt&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">type&lt;/span>-&lt;span style="color:#a6e22e">definition&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#a6e22e">F2&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">rename&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; [&lt;span style="color:#a6e22e">g&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">Plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">previous&lt;/span>-&lt;span style="color:#a6e22e">diagnostic&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; ]&lt;span style="color:#a6e22e">g&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">Plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">next&lt;/span>-&lt;span style="color:#a6e22e">diagnostic&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">K&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">hover&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">xmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &lt;span style="color:#a6e22e">f&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">document&lt;/span>-&lt;span style="color:#a6e22e">range&lt;/span>-&lt;span style="color:#a6e22e">format&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">nmap&lt;/span> &amp;lt;&lt;span style="color:#a6e22e">buffer&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#a6e22e">F5&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#a6e22e">plug&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">lsp&lt;/span>-&lt;span style="color:#a6e22e">code&lt;/span>-&lt;span style="color:#a6e22e">lens&lt;/span>)&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e"> &amp;#34; reformatar sempre ao gravar (as vezes irritante)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"> &amp;#34; autocmd BufWritePre &amp;lt;buffer&amp;gt; LspDocumentFormatSync&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">endfunction&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e">&amp;#34; DecoraÃ§Ãµes&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">augroup&lt;/span> &lt;span style="color:#a6e22e">lsp_install&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">au&lt;/span>!&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">lsp_signs_enabled&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">&amp;#34; liga signs&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">lsp_diagnostics_echo_cursor&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">&amp;#34; liga ecoar sob o cursor no modo normal&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">lsp_signs_error&lt;/span> = {&lt;span style="color:#e6db74">&amp;#39;text&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;âœ—&amp;#39;&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"> &amp;#34; let g:lsp_signs_warning = {&amp;#39;text&amp;#39;: &amp;#39;â€¼&amp;#39;, &amp;#39;icon&amp;#39;: &amp;#39;/path/to/some/icon&amp;#39;} &amp;#34; Ã­cones sÃ³ na versÃ£o grÃ¡fica&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"> &amp;#34; let g:lsp_signs_hint = {&amp;#39;icon&amp;#39;: &amp;#39;/path/to/some/other/icon&amp;#39;} &amp;#34; Ã­cones sÃ³ na versÃ£o grÃ¡fica&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">lsp_signs_warning&lt;/span> = {&lt;span style="color:#e6db74">&amp;#39;text&amp;#39;&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;â€¼&amp;#39;&lt;/span>}&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">g&lt;/span>:&lt;span style="color:#a6e22e">lsp_highlight_references_enabled&lt;/span> = &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">highlight&lt;/span> &lt;span style="color:#a6e22e">link&lt;/span> &lt;span style="color:#a6e22e">LspErrorText&lt;/span> &lt;span style="color:#a6e22e">GruvboxRedSign&lt;/span> &lt;span style="color:#75715e">&amp;#34; requires gruvbox&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">highlight&lt;/span> &lt;span style="color:#a6e22e">clear&lt;/span> &lt;span style="color:#a6e22e">LspWarningLine&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"> &amp;#34; highlight lspReference ctermfg=red guifg=red ctermbg=green guibg=green&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">highlight&lt;/span> &lt;span style="color:#a6e22e">lspReference&lt;/span> &lt;span style="color:#a6e22e">guibg&lt;/span>=&lt;span style="color:#ae81ff">#303010&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e">
&lt;/span>&lt;span style="color:#75715e"> &amp;#34; chama s:on_lsp_buffer_enabled somente para linguagens cadastradas no LSP&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#a6e22e">autocmd&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> &lt;span style="color:#a6e22e">lsp_buffer_enabled&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>:&lt;span style="color:#a6e22e">on_lsp_buffer_enabled&lt;/span>()&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#a6e22e">augroup&lt;/span> &lt;span style="color:#a6e22e">END&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A primeira vez que iniciar o vim com um arquivo Haskell vai levar um tempinho pra carregar (verifique o status com &lt;code>:LspStatus&lt;/code>). Assim que a margem esquerda do editor ficar com um espaÃ§o de 1 letra quer dizer que funcionou!&lt;/p>
&lt;p>Agora seu Vim fala &lt;code>LSP&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>Hover:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://dev-to-uploads.s3.amazonaws.com/i/ldga2jmvzlj9epp0rjf8.png"
alt="Alt Text"/>&lt;/p>
&lt;ul>
&lt;li>Auto-complete:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://dev-to-uploads.s3.amazonaws.com/i/yhiu4kww6paaehuisp20.png"
alt="Alt Text"/>&lt;/p>
&lt;p>etc. etc. etc.&lt;/p>
&lt;p>_&lt;/p>
&lt;p>= M =&lt;/p></description></item><item><title>Parsing em GO com uso eficiente da memÃ³ria</title><link>https://monique.dev/posts/go-parsing/</link><pubDate>Wed, 21 Oct 2020 12:00:00 -0300</pubDate><guid>https://monique.dev/posts/go-parsing/</guid><description>&lt;p>Ao invÃ©s de ler todo o fluxo gulosamente em memÃ³ria e passÃ¡-lo para &lt;code>json.Unmarshal&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">Unmarshal&lt;/span>(&lt;span style="color:#a6e22e">umMonteDeBytes&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">minhaStruct&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>NÃ³s podemos delegar a leitura do fluxo para os nossos queridos mestres da golang:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-go" data-lang="go">&lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">meuIOReader&lt;/span>).&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">minhaStruct&lt;/span>)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>E ler arquivos de multi-giga(tera?)bytes sem suor. TambÃ©m funciona com &lt;code>xml.NewDecoder&lt;/code>.&lt;/p>
&lt;p>_&lt;/p>
&lt;p>= M =&lt;/p></description></item><item><title>Como interpretar uma lista de pares chave-valor com AWK</title><link>https://monique.dev/posts/awk/</link><pubDate>Mon, 07 Sep 2020 12:00:00 -0300</pubDate><guid>https://monique.dev/posts/awk/</guid><description>&lt;p>Um exemplo simples, usando &lt;code>env&lt;/code> como entrada:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ env | grep EDITOR
EDITOR&lt;span style="color:#f92672">=&lt;/span>vim
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ env | awk -F&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{a[$1]=$2} END {print(a[&amp;#34;EDITOR&amp;#34;])}&amp;#39;&lt;/span>
vim
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Entretanto, Ã© muito mais fÃ¡cil fazer &lt;code>echo $EDITOR&lt;/code>.&lt;/p>
&lt;p>Mas as vezes nÃ£o Ã© tÃ£o fÃ¡cil:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ xdotool getactivewindow getwindowgeometry --shell | awk -F&lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;{a[$1]=$2} END {print(a[&amp;#34;WIDTH&amp;#34;])}&amp;#39;&lt;/span>
&lt;span style="color:#ae81ff">1430&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Caso queira pegar a largura da janela ativa.&lt;/p>
&lt;p>_&lt;/p>
&lt;p>= M =&lt;/p></description></item><item><title>Sobre</title><link>https://monique.dev/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://monique.dev/about/</guid><description>&lt;h1 id="lorem-ipsum">lorem ipsum&lt;/h1>
&lt;p>button: Sobre
weight: 2&lt;/p></description></item></channel></rss>